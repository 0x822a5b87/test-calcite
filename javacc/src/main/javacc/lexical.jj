options {

}

PARSER_BEGIN(MyLexical)

package com.xxx.generated.lexical;

public class MyLexical {

}

PARSER_END(MyLexical)

<DEFAULT> MORE : {
    "a" : S1
}

<S1> MORE : {
    "b" {
        // 1
        int l = image.length()-1;
        image.setCharAt(l, Character.toUpperCase(image.charAt(l)));
        // 2
    } : S2
}

<S2> TOKEN : {
    < ABCD: "cd" >
    {
        // 3
        matchedToken.image = image.toString();
    } : DEFAULT
}

TOKEN_MGR_DECLS :
{
  int stringSize;
}

// 当匹配到 " 时，初始化 stringSize = 0，并且 lexical state 进入WithinString状态
MORE :
{
  "\"" {stringSize = 0;} : WithinString
}

// 在这里我们注意到一个问题，当碰到 <~ ["\"", "\n", "\r"]> 字符时，下面两个模块都可以匹配
// 按照javacc的词法规定
// All regular expressions in the current lexical state are considered as potential match candidates.
// The token manager consumes the maximum number of characters from the input stream possible that match one of these regular expressions.
// That is, the token manager prefers the longest possible match.
// If there are multiple longest matches of the same length, the regular expression that is matched is the one with the earliest order of occurrence in the grammar file.
// 当我们匹配空字符串 "" 时，两个长度一样，选择先出现的
// 当我们匹配正常字符串时，下面的匹配长度更长，我们选择后出现的
<WithinString> TOKEN :
{
  <STRLIT: "\""> {System.out.println("Size = " + stringSize);} : DEFAULT
}

<WithinString> MORE :
{
  <~["\n","\r"]> {stringSize++;}
}
